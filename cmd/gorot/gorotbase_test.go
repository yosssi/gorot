package main

import (
	"errors"
	"fmt"
	"testing"
)

func Test_bindata_read_newReaderErr(t *testing.T) {
	errExpected := errors.New("Read \"test\": EOF")
	if _, err := bindata_read(nil, "test"); err == nil || err.Error() != errExpected.Error() {
		t.Errorf("err should be %q [actual: %q]", errExpected, err)
	}
}

func Test_bindata_read_copyErr(t *testing.T) {
	errExpected := errors.New("Read \"test\": unexpected EOF")
	if _, err := bindata_read([]byte{0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84}, "test"); err == nil || err.Error() != errExpected.Error() {
		t.Errorf("err should be %q [actual: %q]", errExpected, err)
	}
}

func Test_bindata_read(t *testing.T) {
	if _, err := bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x90,
		0x31, 0x4f, 0xc3, 0x30, 0x10, 0x85, 0xe7, 0xdc, 0xaf, 0xb8, 0x7a, 0x40,
		0x09, 0xaa, 0x92, 0xbd, 0x12, 0x53, 0x07, 0x96, 0x0c, 0x08, 0xc4, 0x84,
		0x18, 0x8c, 0xe3, 0x3a, 0x16, 0xf1, 0x5d, 0x75, 0xb6, 0x91, 0x10, 0xe2,
		0xbf, 0x73, 0x90, 0x20, 0x95, 0x09, 0x2f, 0xb6, 0x9f, 0xde, 0xf3, 0xbb,
		0xcf, 0x67, 0xeb, 0x5e, 0x6d, 0xf0, 0x98, 0x6c, 0x24, 0x80, 0x98, 0xce,
		0x2c, 0x05, 0x5b, 0x68, 0xcc, 0x29, 0x15, 0x03, 0xba, 0x87, 0x58, 0xe6,
		0xfa, 0xd2, 0x3b, 0x4e, 0xc3, 0x3b, 0xe7, 0x9c, 0xe3, 0x10, 0x58, 0xb8,
		0x0c, 0x2e, 0x4d, 0x06, 0x3a, 0x80, 0x37, 0x2b, 0xa8, 0xe7, 0x23, 0x53,
		0xe6, 0xc5, 0xe3, 0x0d, 0x5e, 0xe9, 0xad, 0x3f, 0xa6, 0xe9, 0x03, 0x9a,
		0xfb, 0x4a, 0x07, 0x5c, 0x97, 0x54, 0xda, 0x2c, 0x7b, 0x68, 0x1e, 0xb3,
		0x56, 0x8e, 0x91, 0xfc, 0x01, 0x8d, 0x5b, 0x55, 0xa3, 0xf2, 0xc3, 0xac,
		0xe5, 0x6b, 0xc0, 0x2c, 0xb6, 0x92, 0x9b, 0xd1, 0xe2, 0xed, 0x77, 0x1b,
		0x46, 0xc2, 0x32, 0x7b, 0xdc, 0xcc, 0x98, 0x78, 0xfa, 0x49, 0x8c, 0x4c,
		0x61, 0x6b, 0x30, 0xe3, 0xbf, 0x89, 0x5e, 0x23, 0x9f, 0x00, 0xc3, 0x70,
		0x31, 0x0d, 0x3a, 0xf1, 0xb6, 0xf8, 0xfc, 0xc7, 0xac, 0xb0, 0xc9, 0xd2,
		0xd4, 0xc3, 0x49, 0x9f, 0xbc, 0x30, 0xb7, 0x8a, 0x86, 0xd7, 0x1b, 0xdf,
		0x1e, 0xad, 0x84, 0x8c, 0x4f, 0xcf, 0xb9, 0x48, 0xa4, 0xd0, 0xa1, 0x17,
		0x61, 0x41, 0xc5, 0xd6, 0xaf, 0xeb, 0xef, 0x54, 0x2b, 0x0b, 0xb5, 0xbf,
		0x7c, 0xbb, 0x9d, 0xe9, 0xa0, 0x11, 0x5f, 0xaa, 0x10, 0x52, 0x5c, 0x74,
		0x90, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x51, 0x36, 0x2c, 0x7b,
		0x01, 0x00, 0x00,
	}, "test"); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_console_go(t *testing.T) {
	if _, err := console_go(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_console_test_go(t *testing.T) {
	if _, err := console_test_go(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_env_go(t *testing.T) {
	if _, err := env_go(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_main_go(t *testing.T) {
	if _, err := main_go(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_main_test_go(t *testing.T) {
	if _, err := main_test_go(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func Test_scripts_run_sh(t *testing.T) {
	if _, err := scripts_run_sh(); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func TestAsset_notFound(t *testing.T) {
	assetName := "not_exist_asset_name"

	errExpected := fmt.Errorf("Asset %s not found", assetName)

	if _, err := Asset(assetName); err == nil || err.Error() != errExpected.Error() {
		t.Errorf("err should be %q [actual: %q]", errExpected, err)
	}
}

func TestAsset(t *testing.T) {
	if _, err := Asset("main.go"); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}

func TestAssetNames(t *testing.T) {
	AssetNames()
}

func TestAssetDir_notFound(t *testing.T) {
	assetName := "not_exist_asset_name"

	errExpected := fmt.Errorf("Asset %s not found", assetName)

	if _, err := AssetDir(assetName); err == nil || err.Error() != errExpected.Error() {
		t.Errorf("err should be %q [actual: %q]", errExpected, err)
	}
}

func TestAssetDir_notDir(t *testing.T) {
	assetName := "main.go"

	errExpected := fmt.Errorf("Asset %s not found", assetName)

	if _, err := AssetDir(assetName); err == nil || err.Error() != errExpected.Error() {
		t.Errorf("err should be %q [actual: %q]", errExpected, err)
	}
}

func TestAssetDir(t *testing.T) {
	if _, err := AssetDir("scripts"); err != nil {
		t.Errorf("error occurred [error: %q]", err)
	}
}
